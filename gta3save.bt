//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// Author: Seemann
// Purpose: documenting GTA III save file format
// See http://www.gtamodding.com/wiki/Saves_(GTA_3)
//--------------------------------------

Assert(FileSize() == 201820, "File size must be 201820 bytes");

typedef struct RwV3D
{
  float X, Y, Z;
};

enum<byte>flag{OFF,ON};

local int n = 0;
local int s = 0;


struct
{
    DWORD size;
    switch (++n)
    {
    case 1: /* BLOCK 1: MISCELLANEOUS */
        struct
        {
            wchar_t m_szTitle[24];
            struct SYSTEMTIME
            {
                WORD m_wYear, m_wMonth; 
                enum<WORD> {SUNDAY,MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY} m_eDayOfWeek; 
                WORD m_wDay, m_wHour, m_wMinute, m_wSecond, m_wMilliseconds;
            } systemTime;
            DWORD   _611570;
            enum <DWORD> islands {Portland = 1, Staunton, Shoreside} m_eCurrentIsland;
            RwV3D   m_vCameraPos;
            uint    m_dwMinuteLength;
            uint    m_dwWeatherTimer;
            byte    m_bHours;
            byte    align1[3];
            byte    m_bMinutes;
            byte    align2[3];
            WORD    _unknown <comment="current pad?">;
            byte    align3[2];
            uint    m_dwGlobalTimer;
            float   m_fGameSpeed;
            float   _8E2CB4;
            float   _8E2C4C;
            uint    m_dwFramesProcessed;
            float   _5F76C8;
            float   _5F76CC;
            float   _5F76D0;
            int16   _95CCEC;
            byte    align4[2];
            int16   _95CC70;
            byte    align5[2];
            int16   _95CC80;
            byte    align6[2];
            float   _8F2520;
            DWORD   _72BCB8;
            DWORD   _72BCBC;
            DWORD   _72BCC0;
            DWORD   _72BCC4;
            DWORD   _72BCC8;
            DWORD   _72BCCC;
            DWORD   _8F626C;
            float   _6FADD0;
            float   _6FAE58;
            
            DWORD size;
            struct
            {
                char sig[4] <comment="SCR">;
                
                DWORD   size;
                struct
                {
                    uint    m_dwScriptVarsSize;
                    DWORD   m_dwaScriptVars[m_dwScriptVarsSize / 4];
                    
                    DWORD   size <comment="968">;
                    struct
                    {
                        DWORD   m_dwOnmissionVar <comment="$ONMISSION offset">;

                        struct 
                        {
                           DWORD    m_dwMissionFlag <comment="opcode 0181">;
                           DWORD    m_dwBaseBrief <comment="opcode 0182">;
                        } m_aContactInfo[16];
        
                        struct
                        {
                            int32   _unknown[16];
                        } _unknown[4];

                        DWORD   _942F98 <comment="unused (always 0)?">;

                        struct
                        {
                            DWORD   m_dwType;
                            DWORD   m_dwBuildingHandle;
                            DWORD   m_dwNewModel;
                            DWORD   m_dwOldModel;
                        } m_aStaticReplacement[25];
              
                        struct
                        {
                            DWORD   m_dwType;
                            DWORD   m_dwHandle;
                        } m_aInvisibleObjects[20];

                        byte    _95CD55 <comment="unused (always 1)?">;
                        byte    align1[3];
                        uint    m_dwScmMainSize <comment="size of MAIN section in the main.scm">;
                        uint    m_dwLargestMissionSize;
                        int16   m_wMissionsCount;
                        byte    align2[2];
                    } data;
                    DWORD   m_dwThreadsCount;
                    struct
                    {
                        DWORD   m_pNext;
                        DWORD   m_pPrev;
                        char    m_szName[8];
                        DWORD   m_dwCurrentIp;
                        DWORD   m_dwReturnStack[4];
                        DWORD   _f24;
                        DWORD   _f28;
                        WORD    m_wStackCounter;                
                        byte    align1[2];
                        DWORD   m_dwLocals[16];
                        DWORD   m_dwTimerA;
                        DWORD   m_dwTimerB;
                        byte    m_bIfResult;
                        byte    _f79;
                        byte    _f7A;
                        byte    align2;
                        DWORD   m_dwWakeTime;
                        WORD    m_wIfNumber;
                        byte    _f82;
                        byte    _f83;
                        byte    _f84;
                        byte    _f85;
                        byte    _f86;
                        byte    _f87;
                    } m_aRunningScript[m_dwThreadsCount];
                } data <name="Scripts">;        
            } data;
        } data <name="Misc">;
    break;
        
    case 2: /* BLOCK 2: PLAYER PEDS */
        struct
        {      
            DWORD size;
            struct {
                DWORD m_dwPlayersCount;
                struct
                {
                    DWORD   _unknown;
                    WORD    _unknown;        
                    DWORD   _unknown <comment="ped_ref">;
                    struct
                    {
                        byte    _ped0[52];
                        RwV3D   m_vPos;
                        byte    ped1[1456];
                    } CPed;
                    DWORD   m_dwMaxWantedLevel;
                    DWORD   m_dwMaxChaosLevel;
                    char    m_szModelName[24];     
                } m_aPlayerPed[m_dwPlayersCount] <optimize=false>;        
            } data;                 
        } data <name="PlayerPeds">; 
    break;

    case 3: /* BLOCK 3: GARAGES */
        struct
        {
            DWORD size <comment="5484">;
            struct
            {
                DWORD   m_dwGaragesCount;
                DWORD   m_dwFreeBombs; 
                DWORD   m_dwFreeResprays;
                DWORD   _880E18 <comment="unused?">;
                DWORD   _8F1B34;
                DWORD   _941444;
                DWORD   m_dwImportStatus[3]<format=binary>;
                DWORD   m_dwTextGA21Timestamp <comment="time when 'GA_21' was last shown">;
                struct
                {
                    struct
                    {
                        DWORD   m_dwModelId;
                        RwV3D   m_vPos;
                        RwV3D   m_vRotation;
                        DWORD   m_dwImmunities<format=binary>;
                        byte    m_bPrimaryColor;
                        byte    m_bSecondaryColor;
                        byte    m_bRadioStation;
                        byte    m_bModelVariationA;
                        byte    m_bModelVariationB;
                        byte    m_bBombType;
                        byte    align1[2];            
                    } m_aStoredCar[6]<optimize=false>;
                }  m_aSaveGarage[3]<comment="one garage per island">;
                struct
                {
                    byte    m_eType <comment="saveGaragePortland = 16,saveGarageStaunton = 17, saveGarageShoreside = 18">;
                    byte    _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    align1[2];
                    DWORD   _unknown;    
                    DWORD   _unknown <comment="pointer">;
                    DWORD   _unknown <comment="pointer">;
                    byte    _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    align2;
                    float   m_fX1;
                    float   m_fX2;
                    float   m_fY1;
                    float   m_fY2;
                    float   m_fZ1;
                    float   m_fZ2;
                    float   _unknown;
                    float   _unknown;
                    float   _unknown;
                    float   _unknown;
                    float   _unknown;
                    float   _unknown;
                    float   _unknown;
                    float   _unknown;
                    DWORD   _unknown;
                    byte    _unknown;
                    byte    align3[3];
                    DWORD   _unknown;
                    DWORD   _unknown;
        
                    DWORD   _unknown;
                    float   _unknown;
                    float   _unknown;
                    float   _unknown;
                    float   _unknown;
                    float   _unknown;
                    float   _unknown;
                    DWORD   _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    _unknown;
                    byte    align4[2];
                } m_aGarage[32];
            } data;
        } data <name="Garages">;
    break;

    case 7: /* BLOCK 7: CRANES */
        struct
        {
            DWORD   size;
            struct
            {
                DWORD   m_dwCranesCount;
                DWORD   m_dwMilitaryCarsCollected<format=binary, comment="opcode 03ec">;
                struct
                {
                    DWORD   m_dwStaticIndex <comment="index in static objects pool?">;
                    DWORD   _unknown;
                    DWORD   _unknown;
                    float   _float[25];
                    DWORD   _unknown;
                    DWORD   _unknown;
                    byte    _byte[7];
                    byte    align;
                } m_aCrane[8] <optimize=false>;
            } data;
        } data <name="Cranes">;
    break;

    case 9: /* BLOCK 9: PHONES */
        struct
        {
            DWORD size;
            struct
            {
                DWORD   m_dwPhonesCount;
                DWORD   m_dwActivePhones;
                struct
                {
                    RwV3D   m_vPos;
                    UINT32  m_pszText[6] <comment="pointers to text assigned with opcodes like 0388">;
                    DWORD   _unknown;
                    DWORD   m_dwStaticIndex <comment="index in static objects pool?">;
                    enum<DWORD>{eIdle=3,eRinging=9}   m_eStatus;
                    byte    _unknown;
                    byte    align[3];
                } m_aPhone[50];
            } data;
        } data <name="Phones">;
    break;

    case 10: /* BLOCK 10: RESTARTS */
        struct
        {    
            DWORD size;
            struct
            {
                char    sig[4]<comment="RST">;
                DWORD   size;  
                struct
                {
                    typedef struct RestartPoint
                    {
                        RwV3D m_vPos;
                        float m_fAngle;
                    };
                    RestartPoint    m_vWasted[8];
                    RestartPoint    m_vbusted[8];
                    WORD    m_wWastedRestartsCount;
                    WORD    m_wBustedRestartsCount;
                    flag    m_bOverrideNextRestart <comment="opcodes 016E, 0255">;
                    byte    align[3];
                    RestartPoint m_vOverridenRestartPoint <comment="opcodes 016E, 0255">;
                    flag    m_bFadeInAfterNextDeath <comment="opcode 040F">;
                    flag    m_bFadeInAfterNextArrest <comment="opcode 040E">;
                    flag    m_bOverrideHospitalLevel <comment="opcode 041F">;
                    flag    m_bOverridePoliceLevel <comment="opcode 0420">;
                } data <name="Restarts">;
            } data;
        } data <name="Restarts">;
        break;   
    
    case 13: /* BLOCK 13: GANGS */

        struct
        {
            DWORD   size;
            struct
            {
                char    sig[4] <comment="GNG">;
                DWORD   size;
                struct
                {
                    int     m_dwCarModel;
                    byte    m_bPedModelOverride <comment="opcode 0410">;
                    byte    _unknown <comment="unused/align?">;
                    WORD    _unknown <comment="unused/align?">;
                    DWORD   m_dwPrimaryWeapon;
                    DWORD   m_dwSecondaryWeapon;
                } m_aGang[9];
            } data;
        } data <name="Gangs">;
        break;
 
    case 14: /* BLOCK 14: CAR GENERATORS */
        struct
        {    
            DWORD size;
            struct
            {
                char    sig[4]<comment="CGN">;
                DWORD   size;  
                struct
                {
                    DWORD size <comment="12">;
                    struct
                    {
                        DWORD   m_dwTotalCount;
                        DWORD   m_dwActiveCount;
                        byte    _unknown;
                        byte    _unknown;
                        byte    align[2];
                    } data;

                    DWORD size <comment="11560">;
                    struct
                    {
                        DWORD   m_dwModelId;
                        RwV3D   m_vPos;
                        float   m_fAngle;
                        int16   m_wPrimaryColor, m_wSecondaryColor;
                        flag    m_bForceSpawn;
                        byte    m_bAlarm;
                        byte    m_aDoorLock;
                        byte    align;
                        WORD    m_wMinDelay, m_wMaxDelay;
                        DWORD   m_dwTime;
                        int     _unknown;
                        int     _unknown;
                        RwV3D   _unknown;
                        RwV3D   _unknown;
                        DWORD   _unknown;
                    } m_aCarGenerator[160];
                    
                } data <name="CarGenerators">;
            } data;
        } data <name="CarGenerators">;
        break;        

    case 21:
    case 22:
        struct{
            FSkip(size);
        }data<name="padding">;
        break;
    default:
        struct
        {
            FSkip(size);
        } data;
    }
    if (sizeof(data) < size) byte align[size-sizeof(data)];
} block[22]<optimize=false,open=true>;
string checkSum(int sum){
    uint newSum = Checksum(CHECKSUM_BYTE, 0, FileSize()-4);
    WriteUInt(FileSize()-4, newSum);
    string s;
    SPrintf( s, "%d", (int)newSum );
    return s;
};
DWORD checksum<read=checkSum>;
