//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// Author: Seemann
// Purpose: documenting GTA III save file format
// See http://www.gtamodding.com/wiki/Saves_(GTA_3)
//--------------------------------------

Assert(FileSize() == 201820, "File size must be 201820 bytes");

typedef struct RwV3D
{
  float X, Y, Z;
};

enum<byte>flag{OFF,ON};

local int n = 0;
local int s = 0;


struct
{
    DWORD size;
    switch (++n)
    {
    case 1: /* BLOCK 1: MISCELLANEOUS */
        struct
        {
            wchar_t title[24];
            struct SYSTEMTIME
            {
                WORD wYear, wMonth; 
                enum<WORD> {SUNDAY,MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY} wDayOfWeek; 
                WORD wDay, wHour, wMinute, wSecond, wMilliseconds;
            } systemTime;
            DWORD   dword_611570;
            enum <DWORD> islands {Portland = 1, Staunton, Shoreside} current_island;
            RwV3D   cameraPos;
            uint    minuteLength;
            uint    weatherTimer;
            byte    hours;
            byte    align1[3];
            byte    minutes;
            byte    align2[3];
            WORD    unknown <comment="current pad?">;
            byte    align3[2];
            uint    globalTimer;
            float   gameSpeed;
            float   unk_8E2CB4;
            float   unk_8E2C4C;
            uint    framesProcessed;
            float   unk_5F76C8;
            float   unk_5F76CC;
            float   unk_5F76D0;
            int16   unk_95CCEC;
            byte    align4[2];
            int16   unk_95CC70;
            byte    align5[2];
            int16   unk_95CC80;
            byte    align6[2];
            float   unk_8F2520;
            DWORD   unk_72BCB8;
            DWORD   unk_72BCBC;
            DWORD   unk_72BCC0;
            DWORD   unk_72BCC4;
            DWORD   unk_72BCC8;
            DWORD   unk_72BCCC;
            DWORD   unk_8F626C;
            float   unk_6FADD0;
            float   unk_6FAE58;
            
            DWORD size;
            struct
            {
                char sig[4] <comment="SCR">;
                
                DWORD   size;
                struct
                {
                    uint    scriptVarsSize;
                    DWORD   scriptVars[scriptVarsSize / 4];
                    
                    DWORD   size <comment="968">;
                    struct
                    {
                        DWORD   onmissionVar <comment="$ONMISSION offset">;
                        struct 
                        {
                           DWORD    missionFlag <comment="opcode 0181">;
                           DWORD    baseBrief <comment="opcode 0182">;
                        } ContactInfo[16];        
                        struct
                        {
                            int32   unknown[16];
                        } unknown[4];
                        DWORD   unk_942F98 <comment="unused (always 0)?">;
                        struct
                        {
                            DWORD   type;
                            DWORD   buildingHandle;
                            DWORD   newModel;
                            DWORD   oldModel;
                        } StaticReplacement[25];              
                        struct
                        {
                            DWORD   type;
                            DWORD   handle;
                        } InvisibleObjects[20];
                        byte    unk_95CD55 <comment="unused (always 1)?">;
                        byte    align1[3];
                        uint    scmMainSize <comment="size of MAIN section in the main.scm">;
                        uint    largest_mission_size;
                        int16   missionsCount;
                        byte    align2[2];
                    } ScriptInfo;
                    DWORD   threadsCount;
                    struct
                    {
                        DWORD   ptrNext;
                        DWORD   ptrPrev;
                        char    name[8];
                        DWORD   currentIp;
                        DWORD   returnStack[4];
                        DWORD   field_24;
                        DWORD   field_28;
                        WORD    stackCounter;                
                        byte    align1[2];
                        DWORD   locals[16];
                        DWORD   timerA;
                        DWORD   timerB;
                        byte    ifResult;
                        byte    field_79;
                        byte    field_7A;
                        byte    align2;
                        DWORD   wakeTime;
                        WORD    ifNumber;
                        byte    field_82;
                        byte    field_83;
                        byte    field_84;
                        byte    field_85;
                        byte    field_86;
                        byte    field_87;
                    } CRunningScript[threadsCount];
                } data <name="Scripts">;        
            } data;
        } data <name="Misc">;
    break;
        
    case 2: /* BLOCK 2: PLAYER PEDS */
        struct
        {      
            DWORD size;
            struct {
                DWORD playersCount;
                struct
                {
                    DWORD   unknown;
                    WORD    unknown;        
                    DWORD   unknown <comment="ped_ref">;
                    struct
                    {
                        byte    ped0[52];
                        RwV3D   pos;
                        byte    ped1[1456];
                    } CPed;
                    DWORD   maxWantedLevel;
                    DWORD   maxChaosLevel;
                    char    modelName[24];     
                } PlayerPed[playersCount] <optimize=false>;        
            } data;                 
        } data <name="PlayerPeds">; 
    break;

    case 3: /* BLOCK 3: GARAGES */
        struct
        {
            DWORD size <comment="5484">;
            struct
            {
                DWORD   garagesCount;
                DWORD   freeBombs; 
                DWORD   freeResprays;
                DWORD   unk_880E18 <comment="unused?">;
                DWORD   unk_8F1B34;
                DWORD   unk_941444;
                DWORD   importStatus[3]<format=binary>;
                DWORD   textGA21Timestamp <comment="time when 'GA_21' was last shown">;
                struct
                {
                    struct
                    {
                        DWORD   model_id;
                        RwV3D   pos;
                        RwV3D   rotation;
                        DWORD   unknown;
                        byte    unknown;
                        byte    unknown;
                        byte    unknown;
                        byte    unknown;
                        byte    unknown;
                        byte    unknown;
                        byte    align1[2];            
                    } StoredCar[6]<optimize=false>;
                } StoredCars[3]<comment="one entry per island">;
                struct
                {
                    byte    type <comment="saveGaragePortland = 16,saveGarageStaunton = 17, saveGarageShoreside = 18">;
                    byte    unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    align1[2];
                    DWORD   unknown;    
                    DWORD   unknown <comment="pointer">;
                    DWORD   unknown <comment="pointer">;
                    byte    unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    align2;
                    float   x1;
                    float   x2;
                    float   y1;
                    float   y2;
                    float   z1;
                    float   z2;
                    float   unknown;
                    float   unknown;
                    float   unknown;
                    float   unknown;
                    float   unknown;
                    float   unknown;
                    float   unknown;
                    float   unknown;
                    DWORD   unknown;
                    byte    unknown;
                    byte    align3[3];
                    DWORD   unknown;
                    DWORD   unknown;
        
                    DWORD   unknown;
                    float   unknown;
                    float   unknown;
                    float   unknown;
                    float   unknown;
                    float   unknown;
                    float   unknown;
                    DWORD   unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    unknown;
                    byte    align4[2];
                } Garage[32];
            } data;
        } data <name="Garages">;
    break;

    case 7: /* BLOCK 7: CRANES */
        struct
        {
            DWORD   size;
            struct
            {
                DWORD   cranesCount;
                DWORD   militaryCarsCollected<format=binary, comment="opcode 03ec">;
                struct
                {
                    DWORD   unknown;
                    DWORD   unknown;
                    DWORD   unknown;
                    float   unk_float[25];
                    DWORD   unknown;
                    DWORD   unknown;
                    byte    unk_byte[7];
                    byte    align;
                } Crane[8] <optimize=false>;
            } data;
        } data <name="Cranes">;
    break;

    case 10: /* BLOCK 10: RESTARTS */
        struct
        {    
            DWORD size;
            struct
            {
                char    sig[4]<comment="RST">;
                DWORD   size;  
                struct
                {
                    typedef struct RestartPoint
                    {
                        RwV3D pos;
                        float angle;
                    };
                    RestartPoint    wasted[8];
                    RestartPoint    busted[8];
                    WORD    wastedRestartsCount;
                    WORD    bustedRestartsCount;
                    flag    overrideNextRestart <comment="opcodes 016E, 0255">;
                    byte     align[3];
                    RestartPoint overridenRestartPoint <comment="opcodes 016E, 0255">;
                    flag    fadeInAfterNextDeath <comment="opcode 040F">;
                    flag    fadeInAfterNextArrest <comment="opcode 040E">;
                    flag    overrideHospitalLevel <comment="opcode 041F">;
                    flag    overridePoliceLevel <comment="opcode 0420">;
                } data <name="Restarts">;
            } data;
        } data <name="Restarts">;
        break;   
    
    case 13: /* BLOCK 13: GANGS */

        struct
        {
            DWORD   size;
            struct
            {
                char    sig[4] <comment="GNG">;
                DWORD   size;
                struct
                {
                    int     carModel;
                    byte    pedModelOverride <comment="opcode 0410">;
                    byte    unknown <comment="unused?">;
                    WORD    unknown <comment="unused?">;
                    DWORD   primaryWeapon;
                    DWORD   secondaryWeapon;
                } Gang[9];
            } data;
        } data <name="Gangs">;
        break;
 
    case 14: /* BLOCK 14: CAR GENERATORS */
        struct
        {    
            DWORD size;
            struct
            {
                char    sig[4]<comment="CGN">;
                DWORD   size;  
                struct
                {
                    DWORD size <comment="12">;
                    struct
                    {
                        DWORD   totalCount;
                        DWORD   activeCount;
                        byte    unknown;
                        byte    unknown;
                        byte    align[2];
                    } data;

                    DWORD size <comment="11560">;
                    struct
                    {
                        DWORD   modelId;
                        RwV3D   pos;
                        float   angle;
                        int16   primaryColor, secondaryColor;
                        flag    forceSpawn;
                        byte    alarm;
                        byte    doorLock;
                        byte    align;
                        WORD    minDelay, maxDelay;
                        DWORD   time;
                        int     unknown;
                        int     unknown;
                        RwV3D   unknown;
                        RwV3D   unknown;
                        DWORD   unknown;
                    } CarGenerator[160];
                    
                } data <name="CarGenerators">;
            } data;
        } data <name="CarGenerators">;
        break;        

    case 21:
    case 22:
        struct{
            FSkip(size);
        }data<name="padding">;
        break;
    default:
        struct
        {
            FSkip(size);
        } data;
    }
    if (sizeof(data) < size) byte align[size-sizeof(data)];
} block[22]<optimize=false,open=true>;
string checkSum(int sum){
    uint newSum = Checksum(CHECKSUM_BYTE, 0, FileSize()-4);
    WriteUInt(FileSize()-4, newSum);
    string s;
    SPrintf( s, "%d", (int)newSum );
    return s;
};
DWORD checksum<read=checkSum>;
