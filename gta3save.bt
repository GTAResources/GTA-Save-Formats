//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// Author: Seemann
// Purpose: documenting GTA III save file format
// See http://www.gtamodding.com/wiki/Saves_(GTA_3)
//--------------------------------------

//Assert(FileSize() == 201820, "File size must be 201820 bytes");

typedef struct RwV3D
{
  FLOAT X, Y, Z;
};

enum <BYTE>  FLAG    {OFF,ON};
enum <WORD>  FLAG_   {OFF_,ON_};
enum <DWORD> FLAG__  {OFF__,ON__};
enum <DWORD> LEVEL   {Portland = 1, Staunton, Shoreside};
enum <WORD>  DAY     {Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday};

local int n = 0;
local int s = 0;


struct
{
    DWORD size;
    switch (n++)
    {
    case 0: /* BLOCK 0: MISCELLANEOUS */
        struct
        {
            wchar_t szTitle[24];
            struct SYSTEMTIME
            {
                WORD nYear, nMonth; 
                DAY  eDayOfWeek;
                WORD nDay, nHour, nMinute, nSecond, nMilliseconds;
            } systemTime;
            DWORD   _611570;
            LEVEL   eCurrentLevel;
            RwV3D   vCameraPos;
            UINT    nMillisecondsPerGameMinute;
            UINT    nLastClockTick <comment="WeatherTimer">;
            BYTE    nHours;
            BYTE    align1[3];
            BYTE    nMinutes;
            BYTE    align2[3];
            WORD    _unknown <comment="current pad?">;
            BYTE    align3[2];
            UINT    nTimeInMilliseconds <comment="GlobalTimer">;
            FLOAT   fTimeScale <comment="opcode 015D">;
            FLOAT   fTimerTimeStep;
            FLOAT   fTimerTimeStepNonClipped;
            UINT    nFrameCounter;
            FLOAT   _fTimeStep <comment="unused (always 1.0)?">;
            FLOAT   _fFramesPerUpdate <comment="unused (always 1.0)?">;
            FLOAT   _fTimeScale <comment="unused (always 1.0)?">;
            INT16   nOldWeatherType;
            BYTE    align4[2];
            INT16   nNewWeatherType;
            BYTE    align5[2];
            INT16   nForcedWeatherType;
            BYTE    align6[2];
            FLOAT   _fWeatherInterpolationValue;
            BYTE    _szCompileTime[24] <comment="unused?">;
            DWORD   _WeatherTypeInList;
            FLOAT   _6FADD0 <comment="camera related">;
            FLOAT   _6FAE58 <comment="camera related">;
            
            DWORD size;
            struct
            {
                CHAR sig[4] <comment="SCR">;
                
                DWORD   size;
                struct
                {
                    UINT    nVariableSpaceSize;
                    DWORD   aScriptVariable[nVariableSpaceSize / 4];
                    
                    DWORD   size <comment="968">;
                    struct
                    {
                        DWORD   nOnAMissionFlag <comment="offset in aScriptVariable">;

                        struct 
                        {
                           DWORD    nMissionFlag <comment="opcode 0181">;
                           DWORD    nBaseBrief <comment="opcode 0182">;
                        } aContactInfo[16];
        
                        struct
                        {
                            INT32   _unknown[16];
                        } _unknown[4];

                        DWORD   _nLastMissionPassedTime <comment="unused (always 0)?">;

                        struct
                        {
                            DWORD   nType;
                            DWORD   nBuildingHandle;
                            DWORD   nNewModel;
                            DWORD   nOldModel;
                        } aBuildingSwap[25];
              
                        struct
                        {
                            DWORD   nType;
                            DWORD   nHandle;
                        } aInvisibilitySetting[20];

                        FLAG    bAlreadyRunningAMissionScript;
                        BYTE    align1[3];
                        UINT    nMainScriptSize;
                        UINT    nLargestMissionScriptSize;
                        INT16   nNumberOfExclusiveMissionScripts;
                        BYTE    align2[2];
                    } data;
                    DWORD   nNumActiveScripts;
                    struct
                    {
                        DWORD   pNext;
                        DWORD   pPrev;
                        CHAR    szName[8];
                        DWORD   nCurrentIp;
                        DWORD   nReturnStack[4];
                        DWORD   _f24;
                        DWORD   _f28;
                        WORD    nStackCounter;                
                        BYTE    align1[2];
                        DWORD   nLocals[16];
                        DWORD   nTimerA;
                        DWORD   nTimerB;
                        BYTE    bIfResult;
                        BYTE    _f79;
                        BYTE    _f7A;
                        BYTE    align2;
                        DWORD   nWakeTime;
                        WORD    nIfNumber;
                        BYTE    _f82;
                        BYTE    _f83;
                        BYTE    _f84;
                        BYTE    _f85;
                        BYTE    _f86;
                        BYTE    _f87;
                    } aRunningScript[nNumActiveScripts];
                } data;
            } data;
        } block <name="Misc">;
        break;
        
    case 1: /* BLOCK 1: PLAYER PEDS */
        struct
        {      
            DWORD size;
            struct {
                DWORD nNumPlayers;
                struct
                {
                    DWORD   _unknown;
                    WORD    _unknown;        
                    DWORD   _unknown <comment="ped_ref">;
                    struct
                    {
                        BYTE    _ped0[52];
                        RwV3D   vPos;
                        BYTE    _ped1[1456];
                    } CPed;
                    DWORD   nMaxWantedLevel;
                    DWORD   nMaxChaosLevel;
                    CHAR    szModelName[24];     
                } aPlayerPed[nNumPlayers] <optimize=false>;        
            } data;                 
        } block <name="PlayerPeds">; 
        break;

    case 2: /* BLOCK 2: GARAGES */
        struct
        {
            DWORD size <comment="5484">;
            struct
            {
                DWORD   nNumGarages;
                FLAG__  nBombsAreFree <comment="opcode 021D">; 
                FLAG__  nRespraysAreFree <comment="opcode 0335">;
                DWORD   _nCarsCollected <comment="unused?">;
                DWORD   _nBankVansCollected;
                DWORD   _nPoliceCarsCollected;
                DWORD   nImportStatus[3]<format=binary>;
                DWORD   nLastTimeHelpMessage <comment="'GA_21' text message">;
                struct
                {
                    struct
                    {
                        DWORD   nModelId;
                        RwV3D   vPos;
                        RwV3D   vRotation;
                        DWORD   nImmunities<format=binary>;
                        BYTE    bPrimaryColor;
                        BYTE    bSecondaryColor;
                        BYTE    bRadioStation;
                        BYTE    bModelVariationA;
                        BYTE    bModelVariationB;
                        BYTE    bBombType;
                        BYTE    align1[2];            
                    } aStoredCar[6]<optimize=false>;
                }  aCarsInSafeHouse[3]<comment="one safe house per level">;
                struct
                {
                    BYTE    eType <comment="saveGaragePortland = 16,saveGarageStaunton = 17, saveGarageShoreside = 18">;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    align1[2];
                    DWORD   _unknown;    
                    DWORD   _unknown <comment="pointer">;
                    DWORD   _unknown <comment="pointer">;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    align2;
                    FLOAT   fX1;
                    FLOAT   fX2;
                    FLOAT   fY1;
                    FLOAT   fY2;
                    FLOAT   fZ1;
                    FLOAT   fZ2;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    DWORD   _unknown;
                    BYTE    _unknown;
                    BYTE    align3[3];
                    DWORD   _unknown;
                    DWORD   _unknown;        
                    DWORD   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    DWORD   _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    align4[2];
                } aGarage[32];
            } data;
        } block <name="Garages">;
        break;

    case 4: /* BLOCK 4: OBJECTS */
        struct
        {
            DWORD   size;
            struct
            {
                DWORD   nNumObjects;
                struct
                {
                    WORD    nModelId;
                    DWORD   nObjectRef;
                    RwV3D   pos;
                    BYTE    _unknown1[12] <comment="compressed matrix">;
                    FLOAT   _unknown;
                    RwV3D   _unknown;
                    BYTE    _unknown2[12] <comment="compressed matrix">;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    FLOAT   _unknown;
                    BYTE    _unknown;
                    BYTE    _unknown;
                    DWORD   _unknown;
                    DWORD   _unknown;
                    DWORD   _unknown;
                } Object[nNumObjects] <optimize=false>;
            } data;
        } block <name="Objects">;
        break;

    case 6: /* BLOCK 6: CRANES */
        struct
        {
            DWORD   size;
            struct
            {
                DWORD   nNumCranes;
                DWORD   nCarsCollectedMilitaryCrane<format=binary, comment="opcode 03ec">;
                struct
                {
                    DWORD   nStaticIndex <comment="index in static objects pool?">;
                    DWORD   _unknown;
                    DWORD   _unknown;
                    FLOAT   _float[25];
                    DWORD   _unknown;
                    DWORD   _unknown;
                    BYTE    _BYTE[7];
                    BYTE    align;
                } aCrane[8] <optimize=false>;
            } data;
        } block <name="Cranes">;
        break;

    case 8: /* BLOCK 8: PHONE INFO */
        struct
        {
            DWORD size;
            struct
            {
                DWORD   nNumPhones;
                DWORD   nNumActivePhones;
                struct
                {
                    RwV3D   vPos;
                    UINT32  pszText[6] <comment="pointers to text assigned with opcodes like 0388">;
                    DWORD   _unknown;
                    DWORD   nStaticIndex <comment="index in static objects pool?">;
                    enum<DWORD>{eIdle=3,eRinging=9}   eStatus;
                    BYTE    _unknown;
                    BYTE    align[3];
                } aPhoneInfo[50];
            } data;
        } block <name="PhoneInfo">;
        break;

    case 9: /* BLOCK 9: RESTARTS */
        struct
        {    
            DWORD size;
            struct
            {
                CHAR    sig[4]<comment="RST">;
                DWORD   size;  
                struct
                {
                    typedef struct Restart
                    {
                        RwV3D vPos;
                        FLOAT fAngle;
                    };
                    Restart    aHospitalRestart[8];
                    Restart    aPoliceRestart[8];
                    WORD    nNumHospitalRestarts;
                    WORD    nNumPoliceRestarts;
                    FLAG    bOverrideNextRestart <comment="opcodes 016E, 0255">;
                    BYTE    align[3];
                    Restart vOverrideRestart <comment="opcodes 016E, 0255">;
                    FLAG    bFadeInAfterNextDeath <comment="opcode 040F">;
                    FLAG    bFadeInAfterNextArrest <comment="opcode 040E">;
                    FLAG    bOverrideHospitalLevel <comment="opcode 041F">;
                    FLAG    bOverridePoliceLevel <comment="opcode 0420">;
                } data;
            } data;
        } block <name="Restarts">;
        break;   

    case 11: /* BLOCK 11: THE ZONES */
        struct
        {
            DWORD   size;
            struct
            {
                CHAR    sig[4] <comment="ZNS">;
                DWORD   size;
                struct
                {
                    typedef struct
                    {
                        CHAR    szName[8];
                        RwV3D   vCoordA;
                        RwV3D   vCoordB;
                        enum<DWORD>{}   eZoneType <comment="0, 1, 2 or 3 for MapZone">;
                        LEVEL   eZoneLevel;
                        WORD    nZoneInfoIdNight;
                        WORD    nZoneInfoIdDay;
                        INT32   nChildZoneIndex;
                        INT32   nParentZoneIndex;
                        INT32   nSiblingZoneIndex;
                    } Zone;

                    DWORD   nCurrentZoneIndex;
                    LEVEL   eCurrentLevel;
                    WORD    nFindIndex <comment="index of last search invoked by a script">;
                    BYTE    align[2];
                    Zone    aNavigationZone[50] <comment="from gta3.zon">;
                    struct
                    {
                        WORD    aDensity[29];
                    } aZoneInfo[100] <comment="day/night pairs for each Zone">;
                    WORD    nTotalNumberOfNavigationZones;
                    WORD    nTotalNumberOfZoneInfos;
                    Zone    aMapZone[25] <comment="from map.zon">;
                    struct
                    {
                        INT16    nZoneId;
                    } aAudioZone[36];
                    WORD    nTotalNumberOfMapZones;
                    WORD    nNumberOfAudioZones;
                } data;
            } data;
        } block <name="Zones">;
        break;
    
    case 12: /* BLOCK 12: GANGS */

        struct
        {
            DWORD   size;
            struct
            {
                CHAR    sig[4] <comment="GNG">;
                DWORD   size;
                struct
                {
                    int     nCarModel;
                    BYTE    bPedModelOverride <comment="opcode 0410">;
                    BYTE    _unknown <comment="unused/align?">;
                    WORD    _unknown <comment="unused/align?">;
                    DWORD   nPrimaryWeapon;
                    DWORD   nSecondaryWeapon;
                } aGang[9];
            } data;
        } block <name="Gangs">;
        break;
 
    case 13: /* BLOCK 13: CAR GENERATORS */
        struct
        {    
            DWORD size;
            struct
            {
                CHAR    sig[4]<comment="CGN">;
                DWORD   size;  
                struct
                {
                    DWORD size <comment="12">;
                    struct
                    {
                        DWORD   nNumOfCarGenerators;
                        DWORD   nCurrentActiveCount;
                        BYTE    _bProcessCounter;
                        BYTE    _bGenerateEvenIfPlayerIsCloseCounter;
                        BYTE    align[2];
                    } data;
                    DWORD size <comment="11560">;
                    struct
                    {
                        DWORD   nModelId;
                        RwV3D   vPos;
                        FLOAT   fAngle;
                        INT16   nPrimaryColor, nSecondaryColor;
                        FLAG    bForceSpawn;
                        BYTE    bAlarm;
                        BYTE    bDoorLock;
                        BYTE    align;
                        WORD    nMinDelay, nMaxDelay;
                        DWORD   nTime;
                        int     _unknown;
                        int     _unknown;
                        RwV3D   _unknown;
                        RwV3D   _unknown;
                        DWORD   _unknown;
                    } aCarGenerator[160];                    
                } data;
            } data;
        } block <name="CarGenerators">;
        break;        

    case 16: /* BLOCK 16: PLAYER INFO */
        struct
        {    
            DWORD size;
            struct
            {
                DWORD   nMoney;
                BYTE    _fD8;
                DWORD   _fDC;
                WORD    _fFC;
                FLOAT   _f100;
                DWORD   nMoneyOnScreen;
                DWORD   nHiddenPackagesPickedUp; 
                DWORD   nHiddenPackagesCount <comment="opcode 02ED">;
                FLAG    bPlayerNeverGetsTired <comment="opcode 0330">;
                FLAG    bPlayerFastReload <comment="opcode 0331">;
                FLAG    bGetOutOfJailFree <comment="opcode 0413">;
                FLAG    bFreeHealthCare <comment="opcode 0414">;
                BYTE    unknown[70];
            } PlayerInfo;
        } block <name="PlayerInfo">;
        break;

    case 17: /* BLOCK 17: STATS */
        struct
        {    
            DWORD size;
            struct
            {    
                DWORD size;
                struct
                {    
                    DWORD   stat[102];
                    CHAR    szLastMissionPassedName[8] <comment="GXT key">;
                } data;
            } data;
        } block <name="Stats">;
        break;

    case 18: /* BLOCK 18: STREAMING */
        struct
        {    
            DWORD size;
            struct
            {    
                BYTE    _unknown[200];
            } data;
        } block <name="Streaming">;
        break;

    case 19: /* BLOCK 19: PED TYPES */
        struct
        {    
            DWORD size <comment="744">;
            struct
            {    
                CHAR    sig[4]<comment="PTP">;
                DWORD   size;  
                struct
                {
                    DWORD   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    FLOAT   _unknown;
                    DWORD   _unknown;
                    DWORD   _unknown;
                } aPedType[23];
            } data;
        } block <name="PedTypes">;
        break;

    case 20:
    case 21:
        struct
        {
            FSkip(size);
        } block <name="padding">;
        break;
    default:
        struct
        {
            FSkip(size);
        } block;
    }
    if (sizeof(block) < size) BYTE align[size-sizeof(block)];
} block[22]<optimize=false,open=true>;
string checkSum(int nOldSum){
    UINT nNewSum = Checksum(CHECKSUM_BYTE, 0, FileSize()-4);
    if (nNewSum != nOldSum) WriteUInt(FileSize()-4, nNewSum);
    string s;
    SPrintf( s, "%d", (UINT) nNewSum);
    return s;
};
DWORD checksum<read=checkSum>;
